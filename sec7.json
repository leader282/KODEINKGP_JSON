{
    {
        "Introduction" : [
            {
                "Type" : "LAB",
                "Elements" : [
                    {
                        "Question" : "Submit one (single) C program.\r\n    Write a C program to perform the following tasks. \r\n    1. Take as input the first 2 digits of your roll number. Let this number be a. \r\n    2. Next, take as input the next 2 characters of your roll number. \r\n    3. Then take as input the last 5 digits of your roll number. Let this number be b. \r\n    4. Print \"Hello\" followed by your full roll number. Eg. Hello 21CS10001. \r\n    5. Compute y = 1.234x105 +7.5x10-\u00B3 + b. \r\n    6. Print y. \r\n    7. Compute z = a+++ -b + b-. \r\n    8. Print a,b,z at the end of the computations. \r\n\r\n\r\nYou may need to use math library function : #include imath.h If you want to compile useing the terminal then use the command gcc.\/program.c-Im Proper commenting, indentation and output commands carry marks.",
                        "Answer" : "#include <stdio.h>\r\n#include <math.h>\r\nint main() {\r\n    int a,b;\r\n    long double y;\r\n    int z;\r\n    char c[3];\r\n    printf(\"Input first 2 digits : \");\r\n    scanf(\"%d\",&a);\/\/input first 2 digits\r\n    printf(\"Input next 2 characters :\");\r\n    scanf(\"%s\",c);\/\/input 2 character\r\n    printf(\"Input last 5 digits: \");\r\n    scanf(\"%d\",&b);\/\/input last 5 digits\r\n    printf(\"Hello %d%s%d\\n\",a,c,b);\/\/ output 1\r\n\r\n\r\n    y=1.234*(pow(10,5))+ 7.5*(pow(10,-3))+b;\/\/ the y function\r\n    printf(\"y=%Lf\\n\",y);\/\/printing y\r\n    z=(a++)+(--b)+(b--);\/\/ the z function\r\n    printf(\"z=%d\\n\",z);\/\/printing z\r\n    printf(\"a=%d, b=%d,z=%d\",a,b,z);\/\/ printing a,b and z as final output\r\n    return 0;\r\n}"
                    },
                    {
                        "Question" : "1. Write a C program which takes as input the coordinates of the vertices of a triangle and does the following :\r\n    a. Print the area of the triangle \r\n    b. Print whether the triangle is acute, obtuse or right angle \r\n    c. Check whether the triangle is equilateral or isosceles and if so print the type \r\n\r\n2. Write a C program to assign the students to breakout rooms based on their roll numbers. Read n Roll nos and print the assignment of each them to rooms. Use switch statement. \r\n    a. If the student roll no ends in 0 or 1, assign the student to ERoom \r\n    b. If the student roll no ends in 2 or 3, assign the student to Droom \r\n    c. If the student roll no ends in 4 or 5, assign the student to TRoom \r\n    d. If the student roll no ends in 6 or 7, assign the student to Croom \r\n    e. If the student roll no ends in 8 or 9, assign the student to PRoom.",
                        "Answer" : "1.\r\n\r\n#include <stdio.h>\r\n#include <math.h>\r\nint main() {\r\n    \/\/ DEFINING VARIABLES\r\n    float x1,x2,x3,y1,y2,y3;\r\n    float s1,s2,s3,a,x,y,z;\r\n    \/\/ TAKING INPUT AS COORDINATES\r\n    printf(\"Input coordinate 1 : \");\r\n    scanf(\"%f %f\",&x1,&y1);\r\n\r\n    printf(\"Input coordinate 2 : \");\r\n    scanf(\"%f %f\",&x2,&y2);\r\n\r\n    printf(\"Input coordinate 3 : \");\r\n    scanf(\"%f %f\",&x3,&y3);\r\n    a=(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\/2;\r\n    if(a<0){\r\n    printf(\"Area is %f\\n\",a*(-1));}\r\n    else\r\n    {\r\n        printf(\"Area is %f\\n\",a);\r\n    }\r\n    \/\/ CALCULATING SIDE LENGTHS\r\n    s1=sqrt(((x2-x1)*(x2-x1))+ ((y2-y1)*(y2-y1)));\r\n    s2=sqrt(((x3-x2)*(x3-x2))+ ((y3-y2)*(y3-y2)));\r\n    s3=sqrt(((x3-x1)*(x3-x1))+ ((y3-y1)*(y3-y1)));\r\n    \/\/CHECKING IF A TRIANGLE IS VALID OR NOT\r\n    if (s1==0 || s2==0 || s3==0 || a==0)\r\n    {\r\n        printf(\"It is not a valid triangle\");\r\n    }\r\n    else{\r\n        \/\/ EQUILATERAL \/ ISOSCELES\/ SCALENE CHECK\r\n    if(s1==s2 && s2==s3)\r\n    {\r\n        printf(\"Equilateral Triangle\\n\");\r\n    }\r\n    else if(s1==s2 || s2==s3 || s3==s1)\r\n    {\r\n        printf(\"Isosceles Triangles\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Scalene Triangle\\n\");\r\n    }\r\n    \/\/ ACUTE \/ OBTUSE\/ RIGHT ANGLE CHECK\r\n    x = ((x2-x1)*(x2-x1))+ ((y2-y1)*(y2-y1));\r\n    y = ((x3-x2)*(x3-x2))+ ((y3-y2)*(y3-y2));\r\n    z = ((x3-x1)*(x3-x1))+ ((y3-y1)*(y3-y1));\r\n    if(s1>s2 && s1>s3) \/\/ LARGEST IS S1\r\n    {\r\n        if(x == y + z)\r\n            printf( \" Triangle is Right-angled\");\r\n        else if(x < y + z)\r\n            printf( \"Triangle is acute-angled\");\r\n        else\r\n            printf (\"Triangle is obtuse-angled\");\r\n\r\n    }\r\n\r\n    else if(s2>s1 && s2>s3) \/\/ LARGEST IS S2\r\n    {\r\n        if(y == x + z)\r\n            printf( \"Triangle is right-angled\");\r\n        else if(y < x + z)\r\n            printf (\"Triangle is  acute-angled\");\r\n        else\r\n            printf(\"Triangle is obtuse-angled\");\r\n    }\r\n    else \/\/LARGEST IS S3\r\n    {\r\n        if(z == x + y)\r\n            printf( \"Triangle is right-angled\");\r\n        else if(z < x + y)\r\n            printf(\"Triangle is acute-angled\");\r\n        else\r\n            printf(\"Triangle is obtuse-angled\");\r\n    }}\r\n\r\n}\r\n\r\n2.\r\n\r\n#include <stdio.h>\r\n\r\nint main() {\r\n\/\/ DEFINE VARIABLES\r\n    int i, n;\r\n    int roll;\r\n    \/\/ NUMBER OF STUDENTS\r\n    printf(\"Enter Number of Students :\");\r\n    scanf(\"%d\", &n);\r\n\r\n    for (i = 1; i <= n; i++) {\r\n        printf(\"enter a roll number:\");\r\n        scanf(\"%d\", &roll);\r\n        int last = roll % 10;\/\/ TO FIND LAST DIGIT OF ROLL NUMBER\r\n        \/\/USING SWITCH TO FIND ROOM ALLOTED\r\n        switch (last) {\r\n            case 0: {\r\n                printf(\"ERoom\\n\");\r\n               continue;\r\n            }\r\n            case 1: {\r\n                printf(\"ERoom\\n\");\r\n                continue;\r\n            }\r\n\r\n            case 2: {\r\n                printf(\"DRoom\\n\");\r\n                continue;\r\n            }\r\n            case 3: {\r\n                printf(\"DRoom\\n\");\r\n                continue;\r\n            }\r\n            case 4: {\r\n                printf(\"TRoom\\n\");\r\n                continue;\r\n            }\r\n            case 5: {\r\n                printf(\"TRoom\\n\");\r\n                continue;\r\n            }\r\n            case 6: {\r\n                printf(\"CRoom\\n\");\r\n                continue;\r\n            }\r\n            case 7: {\r\n                printf(\"CRoom\\n\");\r\n                continue;\r\n            }\r\n            case 8 : {\r\n                printf(\"PRoom\\n\");\r\n                continue;\r\n\r\n            }\r\n            case 9: {\r\n                printf(\"PRoom\\n\");\r\n         continue;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}" 
                        
                    }
                ]
            }
        ]
    },
    {
        "Loops-for,while,doWhile" : [
            {
                "Type" : "LAB",
                "Elements" : [
                    {
                        "Question" : "Submit one (single) C program. \r\n    Definitions \r\n\r\n        1. A positive integer is called a PDS number if the number is equal to the sum of the factorial of its digits. For example, 1 (1 = 1!), 2 (2 = 2!), 145 (145 = 1! + 4! + 5!) are IIT numbers. \r\n\r\n        2. A positive integer is called a LAB number if the number is equal to the sum of its divisor except itself. For example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are KGP numbers. \r\n\r\n        3. An n-bow pattern is a pattern of height 2n-1, where the first row has n stars, second row has n\u2014 1 stars, etc., n-1th row has 2 stars, nth row has 1 star, n+1th row has 2 stars, etc., and 2n-1th row has n stars.\r\n        ***\r\n        **\r\n        *\r\n        **\r\n        ***\r\n        The above pattern is a 3-bow pattern. \r\n\r\n      Write a C program to perform the following tasks. \r\n      1. Take as input an integer n. \r\n      2. Print all PDS numbers from 1 to n. \r\n      3. Print all LAB numbers from 1 to n. \r\n      4. If the number n is both a PDS number and a LAB number then print an n-bow pattern.\r\n    You may need to use math library function : #include <math.h> \r\n    If you want to compile useing the terminal then use the command gcc.\/program.c -lm \r\nProper commenting, indentation and output commands carry marks.",
                        "Answer" : "#include <stdio.h>\r\n#include<math.h>\r\nint main ()\r\n{\r\n  \r\nlong int num, n, a, b, i, j, prod, sum = 0, lab, k, t, l;\t\/\/ variable define\r\n  printf (\"Enter Number: \");\r\n  \r\nscanf (\"%ld\", &num);\t\t\/\/ taking input\r\n  if (num == 0)\r\n    \r\n    {\r\n      \r\nprintf (\"Enter valid number\");\r\n    \r\n}\r\n  \r\n\/\/loop 1 for 1 to N\r\n    else\r\n    {\r\n      \r\nfor (b = 1; b <= num; b++)\r\n\t\r\n\t{\r\n\t  \r\nn = b;\t\t\/\/ since we want changes for a specific loop only\r\n\t  sum = 0;\t\t\/\/ redefine when the loop starts again\r\n\t  lab = 0;\t\t\/\/ redefine when the loop starts again\r\n\t  \/\/loop for finding pds number\r\n\t  for (i = n; n > 0; n = n \/ 10)\r\n\t    \r\n\t      \/\/ reverse loop because number will keep on decreasing, n\/10 because then no need to worry about number of digits in the number\r\n\t    {\r\n\t      \r\nprod = 1;\t\/\/ for product\r\n\t      for (j = 1; j <= n % 10; j++)\r\n\t\t\r\n\t\t  \/\/n%10 to take last digit of the number\r\n\t\t  \/\/factorial loop\r\n\t\t{\r\n\t\t  \r\nprod = prod * j;\r\n\t\t\r\n}\r\n\t      \r\nsum = sum + prod;\t\/\/ for summing of factorial of digits\r\n\t    \r\n}\r\n\t  \r\n\/\/ print pds number\r\n\t    if (sum == b)\r\n\t    \r\n\t    {\r\n\t      \r\nprintf (\" PDS number : %ld\\n\", b);\r\n\t    \r\n}\r\n\t\r\n}\r\n      \r\nfor (b = 1; b <= num; b++)\r\n\t\r\n\t{\r\n\t  \r\n\/\/ loop for finding lab number\r\n\t    lab = 0;\r\n\t  \r\nfor (a = 1; a < b; a++)\r\n\t    \r\n\t    {\r\n\t      \r\nif (b % a == 0)\r\n\t\t\r\n\t\t{\t\t\/\/ ch\r\n\t\t  lab = lab + a;\r\n\t\t\r\n}\r\n\t    \r\n}\r\n\t  \r\n\/\/print lab number\r\n\t    if (lab == b)\r\n\t    \r\n\t    {\r\n\t      \r\nprintf (\"LAB number : %ld\\n\", b);\r\n\t    \r\n}\r\n\t\r\n \r\n}\r\n      \r\n\t\/\/loop for n-star pattern\r\n\/\/ running only for  checking if n is pds and lab number or not, because it is to be printed for n only\r\n\t\r\nl = num;\r\n      \r\nfor (i = l; l > 0; l = l \/ 10)\r\n\t\r\n\t  \/\/ reverse loop because number will keep on decreasing, n\/10 because then no need to worry about number of digits in the number\r\n\t{\r\n\t  \r\nprod = 1;\r\n\t  \r\nfor (j = 1; j <= l % 10; j++)\r\n\t    \r\n\t      \/\/n%10 to take last digit of the number\r\n\t      \/\/factorial loop\r\n\t    {\r\n\t      \r\nprod = prod * j;\r\n\t    \r\n}\r\n\t  \r\nsum = sum + prod;\t\/\/ for summing of digits\r\n\t\r\n}\r\n      \r\n\/\/ print pds number\r\n\tif (sum == num)\r\n\t\r\n\t{\r\n\t  \r\nprintf (\"pds number : %ld\\n\", b);\r\n\t\r\n}\r\n      \r\n \r\n \r\n\/\/ loop for finding lab number\r\n\tfor (a = 1; a < num; a++)\r\n\t\r\n\t{\r\n\t  \r\nif (num % a == 0)\r\n\t    \r\n\t    {\r\n\t      \r\nlab = lab + a;\t\/\/ sum of divisors\r\n\t    }\r\n\t\r\n}\r\n      \r\n\/\/print lab number\r\n\tif (lab == num)\r\n\t{\r\n\t  \r\nprintf (\"lab number : %ld\\n\", b);\r\n\t\r\n}\r\n      \r\n\t\/\/ check if n is lab and pds number\r\n\tif (lab == num && sum == num)\r\n\t\r\n\t{\r\n\t  \r\n \r\nfor (int t = 0; t < b; t++)\r\n\t    \r\n\t    {\r\n\t      \r\n\/\/for decreasing star\r\n\t\tfor (int k = 1; k <= num - t; k++)\r\n\t\t\r\n\t\t{\r\n\t\t  \r\nprintf (\"*\");\r\n\t\t\r\n} \r\n\t\t\/\/ to move to next line after printing set of stars\r\n\t\t\r\nprintf (\"\\n\");\r\n\t    \r\n} \r\n\t    \/\/ for increasing star\r\n\t    for (int t = 1; t < num; t++)\r\n\t    \r\n\t    {\r\n\t      \r\n \r\nfor (int k = 1; k <= t + 1; k++)\r\n\t\t\r\n\t\t{\r\n\t\t  \r\nprintf (\"*\");\r\n\t\t\r\n} \r\n\t\t\/\/ to move to next line after printing set of stars\r\n\t\tprintf (\"\\n\");\r\n\t\r\n}}\r\n    \r\n} \r\nreturn 0;\r\n\r\n \r\n \r\n \r\n}\r\n"
                    }
                ]
            }
        ]
    },
    {
        "1-d arrays, strings" : [
            {
                "Type" : "LAB",
                "Elements" : [
                    {
                        "Question" : "4A. Write a C program which does the following:\r\n    1. Declare an array A of integers of size 100. \r\n    2. Read an integer n (n \u2264 100) \r\n    3. Populate the array A with n random integer numbers between -100 and 100 \r\n    4. You need to find the position x to split the array so that the sum of elements on both sides A[0..x] and A[x + 1..n-1] are as close as possible. Print the value of i and the sums of both the subarrays \r\n    5. Print one of the closet pair of elements in the array. The distance between a pair of elements A[i] and A[j] is the absolute value of A[i] - A[j]. \r\nEx1 : If A=[5, 1, 12, 7, 9, 11, 34, 22, 15], the following will be the output : \r\n    Array split position is 5 \r\n    The sums of the left and right subarrays are 45 and 81 \r\n    One closest pair is 5 and 7 \r\nEx2 : If A=[-5, 1, 12, -7, 9, 11, -24, 22, -15], the following will be the output : \r\n    Array split position is 3 \r\n    The sums of the left and right subarrays are 1 and 1 \r\n    One closest pair is 9 and 11 \r\n\r\n4B. Given two strings S and Q, you need to check if Q can be formed from the letters in the string S. \r\nWrite a C program which does the following : \r\n    1. Read a string S as given by the user on a single line (length of the string must be less than 100). \r\n    2. In a loop, do the following : \r\n            a) Read a query string Q comprising of the characters a..z only \r\n            b) If Q is \"end\", quit the program, otherwise print whether Q can be formed from S. \r\nExample : Suppose S is \"the lanes and bylanes of Kolkata\" \r\n        Q=\"baall\" - Q can be formed from S. \r\n        Q=\"balloon\" - Q cannot be formed from S. \r\n        Q=\"bybykk\" - Q cannot be formed from S. \r\n        Q=\"bookin\" - Q cannot be formed from S.",
                        "Answer" : "4A.\r\n\r\n#include <stdio.h>\r\n#include <time.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n    int a[n];\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        a[i]=((rand()%201)-100);\r\n    }\r\n    int sumf,sumb;\r\n    int pos;\r\n    int sf,sb;\r\n    int min=n*200;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        sumf=0;\r\n        sumb=0;\r\n        for(int j=0;j<=i;j++)\r\n        {\r\n            sumf+=a[j];\r\n        }\r\n        for(int j=i+1;j<n;j++)\r\n        {\r\n            sumb+=a[j];\r\n        }\r\n        int sd=sumf-sumb;\r\n        if(sd<0) sd*=-1;\r\n        if(sd<=min)\r\n        {\r\n            min=sd;\r\n            pos=i+1;\r\n            sf=sumf;\r\n            sb=sumb;\r\n        }\r\n    }\r\n    printf(\"The array elements are : \\n\");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        printf(\"%d  \",a[i]);\r\n    }\r\n    printf(\"\\n\");\r\n    printf(\"Array split position is %d.\\n\",pos);\r\n    printf(\"The sums of the left and right subarrays are %d and %d.\\n\",sf,sb);\r\n\r\n    int m=200;\r\n    int n1,n2;\r\n    n1=a[0];\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        for(int j=i+1;j<n;j++)\r\n        {\r\n            int dif=a[i]-a[j];\r\n            if(dif<0) dif*=-1;\r\n            if(dif<m)\r\n            {\r\n                m=dif;\r\n                n1=a[i];\r\n                n2=a[j];\r\n            }\r\n        }\r\n    }\r\n    printf(\"One closest pair is %d and %d\\n\",n1,n2);\r\n    return 0;\r\n}\r\n\r\n4B. \r\n\r\n#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n    char S[100],Q[100];\r\n    printf(\"Enter string S\\n\");\r\n    scanf(\"%[^\\n]s\",S);\r\n    int l1;\/\/stores the length of S\r\n    for(l1=0;S[l1]!='\\0';l1++);\r\n    while(1>0)\r\n    {\r\n        printf(\"Enter string Q\\n\");\r\n    scanf(\"%s\",Q);\r\n    int l2;\r\n    for(l2=0;Q[l2]!='\\0';l2++);\r\n    int cnt=0;\r\n    for(int i=0;i<l2;i++)\r\n    {\r\n        int k=Q[i];\r\n        if(k<97 || k>122)\r\n            cnt=1;\r\n    }\r\n    if(cnt==1)\r\n     {printf(\"Enter string again\\n\");\r\n     continue;}\r\n     if(l2==3)\r\n     {\r\n         if(Q[0]=='e' && Q[1]=='n' && Q[2]=='d')\r\n         {\r\n             printf(\"Program complete\\n\");\r\n             break;\r\n         }\r\n     }\r\n     int cnt2=0;\r\n     for(int i=0;i<l2;i++)\r\n     {\r\n         int cnt3=0;\r\n         int cnt4=0;\r\n         for(int j=0;j<l2;j++)\r\n         {\r\n             if(Q[j]==Q[i])\r\n                cnt3++;\r\n         }\r\n         for(int m=0;m<l1;m++)\r\n         {\r\n             if(S[m]==Q[i])\r\n                cnt4++;\r\n         }\r\n         if(cnt3<=cnt4)\r\n         {\r\n             cnt2++;\r\n         }\r\n     }\r\n     if(cnt2==l2)\r\n     {\r\n         printf(\"Q can be formed from S\\n\");\r\n     }\r\n     else\r\n        printf(\"Q can not be formed from S\\n\");\r\n    }\r\n\r\n}\r\n\r\n"
                    }
                ]
            }
        ]
    },
    {
        "Functions & recursions" : [
            {
                "Type": "LAB",
                "Element" : [
                    {
                        "Question" : "Write the following functions:\r\n\r\n    1. isprime () takes an integer number as input, returns 1 if the number is prime, and 0 otherwise.\r\n    2. sumoftwoprimes () takes an integer number x as input. It returns 1 if the number can be written\r\nas the sum of two prime numbers, and 0 otherwise.\r\n    3. arraysum2p () takes as input two numbers a and b, an array X and its maximum size. It creates\r\nan array containing elements between a and b that can be written as the sum of two prime\r\nnumbers. Return the number of elements of the array.\r\n    4. Write a main() which does the following:\r\n            1. Declare array X containing 100 elements.\r\n            1. Read a, b from the user\r\n            2. Call arraysum2p() to create an array containing numbers between a and b that are the sums of two prime numbers\r\n            3. Print the array",
                        "Answer" : "#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n    char S[100],Q[100];\r\n    printf(\"Enter string S\\n\");\r\n    scanf(\"%[^\\n]s\",S);\r\n    int l1;\/\/stores the length of S\r\n    for(l1=0;S[l1]!='\\0';l1++);\r\n    while(1>0)\r\n    {\r\n        printf(\"Enter string Q\\n\");\r\n    scanf(\"%s\",Q);\r\n    int l2;\r\n    for(l2=0;Q[l2]!='\\0';l2++);\r\n    int cnt=0;\r\n    for(int i=0;i<l2;i++)\r\n    {\r\n        int k=Q[i];\r\n        if(k<97 || k>122)\r\n            cnt=1;\r\n    }\r\n    if(cnt==1)\r\n     {printf(\"Enter string again\\n\");\r\n     continue;}\r\n     if(l2==3)\r\n     {\r\n         if(Q[0]=='e' && Q[1]=='n' && Q[2]=='d')\r\n         {\r\n             printf(\"Program complete\\n\");\r\n             break;\r\n         }\r\n     }\r\n     int cnt2=0;\r\n     for(int i=0;i<l2;i++)\r\n     {\r\n         int cnt3=0;\r\n         int cnt4=0;\r\n         for(int j=0;j<l2;j++)\r\n         {\r\n             if(Q[j]==Q[i])\r\n                cnt3++;\r\n         }\r\n         for(int m=0;m<l1;m++)\r\n         {\r\n             if(S[m]==Q[i])\r\n                cnt4++;\r\n         }\r\n         if(cnt3<=cnt4)\r\n         {\r\n             cnt2++;\r\n         }\r\n     }\r\n     if(cnt2==l2)\r\n     {\r\n         printf(\"Q can be formed from S\\n\");\r\n     }\r\n     else\r\n        printf(\"Q can not be formed from S\\n\");\r\n    }\r\n\r\n}\r\n"
                    },
                    {
                        "Question" : "Submit one (single) C program. \r\n\r\n    Definitions \r\n        1. A positive integer is called a PDS number if the number is equal to the sum of the factorial of its digits. For example, 1 (1 = 1!), 2 (2 = 2!), 145 (145= 1! + 4! + 5!) are PDS numbers. \r\n        2. A positive integer is called a LAB number if the number is equal to the sum of its divisor except itself. For example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are LAB numbers. \r\n        3. An n-bow pattern is a pattern of height 2n-1, where the first row has n stars, second row has n-1 stars, etc., n-1th row has 2 stars, nth row has 1 star, n+1th row has 2 stars, etc., and 2n-1th row has n stars. \r\n        *** \r\n        ** \r\n        * \r\n        **\r\n        ***\r\n        The above pattern is a 3-bow pattern. \r\n    Write a C program to perform the following tasks. \r\n    1. Take as input an integer n. \r\n    2. Write a recursive function the determines if an input integer m is a PDS number or not. \r\n    3. Write a recursive function to determine if an input integer m is a LAB number or not. \r\n    4. Write a recursive function to print all PDS numbers from 1 to n. \r\n    5. Write a recursive function to print all LAB numbers from 1 to n. \r\n    6. Write a recursive function such that if the number n is both a PDS number and a LAB number then an n-bow pattern is printed. \r\n\r\nYou may need to use math library function : #include <math.h> \r\nIf you want to compile useing the terminal then use the command gcc.\/program.c-Im \r\nProper commenting, indentation and output commands carry marks.",
                        "Answer" : "\/\/ Including the header files\r\n#include <stdio.h>\r\n\r\n\/\/ A recursive function to calculate factorial of an integer x\r\nint factorial(int x){\r\n    if(x==0) return 1;\r\n    return x*factorial(x-1);\r\n}\r\n\r\n\/\/ A recursive function to calculate pds value (sum of factorial of digits of k) of an integer k\r\nint pds(int k){\r\n    if(k==0) return 0;\r\n    return factorial(k%10) + pds(k\/10);\r\n}\r\n\r\n\/\/ A function to check if a number k is a pds number\r\nint is_pds(int k){\r\n    return k==pds(k);\r\n}\r\n\r\n\/\/ A recursive function to calculate lab value (sum of divisors of n other than n itself) of an integer k\r\n\/\/ d here is a number incrementing till initial value of k, this is to track the divisor of k.\r\nint lab(int k, int d) {\r\n    if (k <= 1) return 0;\r\n    if (d >= k) return 0;\r\n\r\n    if (k%d == 0) {\r\n        return d + lab(k, d+1);\r\n    }\r\n    return lab(k, d + 1);\r\n}\r\n\r\n\/\/ A function to check if a number k is a lab number\r\nint is_lab(int k){\r\n    return k==lab(k,1);\r\n}\r\n\r\n\/\/ A recursive function to print all the pds numbers between 1 to n\r\nvoid all_pds(int n){\r\n    if(n<1) return;\r\n    all_pds(n-1);\r\n    if(is_pds(n)) printf(\"%d\\n\",n);\r\n}\r\n\r\n\/\/ A recursive function to print all the lab numbers between 1 to n\r\nvoid all_lab(int n){\r\n    if(n<1) return;\r\n    all_lab(n-1);\r\n    if(is_lab(n)) printf(\"%d\\n\",n);\r\n}\r\n\r\n\/\/ A recursive function to print a n number of starts in a row\r\nvoid bow_row(int x){\r\n    if(x==0){\r\n        printf(\"\\n\");\r\n        return;\r\n    }\r\n    printf(\"*\");\r\n    bow_row(x-1);\r\n}\r\n\r\n\/\/ A recursive function to print a bow pattern for a number n\r\nvoid bow(int n){\r\n    if(n==1){\r\n        printf(\"*\\n\");\r\n        return;\r\n    }\r\n    bow_row(n);\r\n    bow(n-1);\r\n    bow_row(n);\r\n}\r\n\r\n\r\n\/\/ The main function\r\nint main(){\r\n    \/\/ Declaring variables of required type\r\n    int n;\r\n\r\n    \/\/ Taking user input for integer n\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\", &n);\r\n\r\n    \/\/ Printing all the PDS numbers in between 1 and n\r\n    printf(\"\\nThe PDS Numbers between 1 and %d are:\\n\",n);\r\n    all_pds(n);\r\n\r\n    \/\/ Printing all the LAB numbers in between 1 and n\r\n    printf(\"The LAB Numbers between 1 and %d are:\\n\",n);\r\n    all_lab(n);\r\n\r\n    \/\/ If n is both pds number and lab number, we print its bow pattern\r\n    if(is_pds(n) && is_lab(n)){\r\n        bow(n);\r\n    }\r\n    \r\n    return 0;\r\n}"
                    }
                ]
            },
            {
                "Type" : "LAB Test",
                "Element" : [
                    {
                        "Question" : "Definition \r\n\r\nHamming distance of two strings : \r\n      Let there be 2 strings $\u2081, $2 with respective lengths \u2081, l2 such that l\u20812 (wlog). Assuming the strings start with index 0, let the number of indices 0 \u2264 i \u2264l 2-1 where the two strings differ be t. All indices between \u2081 - 1 and 2 - 1 will be considered to be diferring. Then the Hamming distance of the two strings is t. Eg : The two strings abcd and bbdefgh are of respective lengths 4 and 7 and among the indices between 0 and 6, they differ in indices 0, 2, 3, 4, 5, 6. Therefore, the Hamming distance of the two strings is 6. \r\n\r\nQuestion \r\n\r\nSubmit one (single) C program. \r\n    Write a C program to perform the following tasks. \r\n    1. The objective is to change an existing password to one which differs from the current one. \r\n    2. Ask the user to enter the existing password, say s. \r\n    3. Then ask the user to enter a new password s'. Here are the requirements for the new password : \r\n            \u25B7 (a) The string s' has to have at least 1 vowel \r\n            \u25B7 (b) It has to have at least 1 digit between 0-9 \r\n            \u25B7 (c) It must have at least 1 special character \r\n            \u25B7 (d) The Hamming distance of s and s' must be at least length(s s')\/3.\r\n\r\nUntil all 4 conditions are satisfied, you have to keep asking for a suitable new password, while outputting the reason(s) the current s' does not qualify as a new password. Eg. Suppose s = vft1! and s' = vftc!. Then this s' cannot be set as a new password as conditions (b) and (d) are not satisfied. \r\n\r\nYou may need to use math library function : #include imath.h as well as functions related to strings. \r\nIf you want to compile useing the terminal then use the command gcc.\/program.c -lm \r\nProper commenting, indentation and output commands carry marks.",
                        "Answer" : "Definition \r\n\r\nHamming distance of two strings : \r\n      Let there be 2 strings $\u2081, $2 with respective lengths \u2081, l2 such that l\u20812 (wlog). Assuming the strings start with index 0, let the number of indices 0 \u2264 i \u2264l 2-1 where the two strings differ be t. All indices between \u2081 - 1 and 2 - 1 will be considered to be diferring. Then the Hamming distance of the two strings is t. Eg : The two strings abcd and bbdefgh are of respective lengths 4 and 7 and among the indices between 0 and 6, they differ in indices 0, 2, 3, 4, 5, 6. Therefore, the Hamming distance of the two strings is 6. \r\n\r\nQuestion \r\n\r\nSubmit one (single) C program. \r\n    Write a C program to perform the following tasks. \r\n    1. The objective is to change an existing password to one which differs from the current one. \r\n    2. Ask the user to enter the existing password, say s. \r\n    3. Then ask the user to enter a new password s'. Here are the requirements for the new password : \r\n            \u25B7 (a) The string s' has to have at least 1 vowel \r\n            \u25B7 (b) It has to have at least 1 digit between 0-9 \r\n            \u25B7 (c) It must have at least 1 special character \r\n            \u25B7 (d) The Hamming distance of s and s' must be at least length(s s')\/3.\r\n\r\nUntil all 4 conditions are satisfied, you have to keep asking for a suitable new password, while outputting the reason(s) the current s' does not qualify as a new password. Eg. Suppose s = vft1! and s' = vftc!. Then this s' cannot be set as a new password as conditions (b) and (d) are not satisfied. \r\n\r\nYou may need to use math library function : #include imath.h as well as functions related to strings. \r\nIf you want to compile useing the terminal then use the command gcc.\/program.c -lm \r\nProper commenting, indentation and output commands carry marks."
                    }
                ]
            }
        ]
    }
}